{"version":3,"sources":["redux/contact/contact-actions.js","redux/contact/contact-reducer.js","redux/store.js","components/mainTitle/MainTitle.js","redux/contactsOperations/contactsOperation.js","redux/contact/contact-selectors.js","components/contactForm/ContactForm.js","components/findContactInput/FindContactInput.js","components/contactListItems/ContactsListItems.js","components/contactsList/ContactsList.js","components/app/App.js","index.js"],"names":["addContactRequest","createAction","addContactSuccess","addContactError","removeContactRequest","removeContactSuccess","removeContactError","fetchContactsRequest","fetchContactsSuccess","fetchContactsError","changeFilter","items","createReducer","actionTypes","state","action","payload","filter","contact","id","loading","combineReducers","store","configureStore","reducer","contacts","contactsReducer","MainTitle","className","addContact","name","number","dispatch","contactsActions","axios","post","then","response","console","log","data","catch","error","fetchContacts","get","removeContact","delete","getFilter","getContacts","getLoading","getContactById","createSelector","contactId","find","getContactsFiltered","toLowerCase","includes","ContactForm","formInitialState","alertMessageShow","handleChange","target","value","setState","handleSubmit","evt","preventDefault","props","onAddContact","toggleAlert","this","CSSTransition","in","timeout","classNames","unmountOnExit","onClick","onSubmit","type","onChange","placeholder","Component","mapDispathToProps","contactsOperation","connect","contactSelectors","e","contactActions","ownProps","item","deleteContact","getFilteredContact","style","display","justifyContent","length","TransitionGroup","component","map","key","App","showContacts","onFetchContacts","prevProps","nextProps","appear","filteredContacts","IsLoadingContacts","color","height","width","mapDispatchToProps","ReactDOM","render","document","getElementById"],"mappings":"4RAIMA,EAAoBC,YAAa,uBACjCC,EAAoBD,YAAa,uBACjCE,EAAkBF,YAAa,qBAE/BG,EAAuBH,YAAa,0BACpCI,EAAuBJ,YAAa,0BACpCK,EAAqBL,YAAa,wBAElCM,EAAuBN,YAAa,uBACpCO,EAAuBP,YAAa,yBACpCQ,EAAqBR,YAAa,uBAczB,GACbG,uBACAC,uBACAC,qBAEAH,kBACAD,oBACAF,oBAGAU,aAZmBT,YAAa,wBAchCM,uBACAC,uBACAC,sBCnCIE,EAAQC,YAAc,IAAD,mBACxBC,EAAYL,sBAAuB,SAACM,EAAOC,GAAR,OAAmBA,EAAOC,WADrC,cAExBH,EAAYX,mBAAoB,SAACY,EAAOC,GAAR,4BAC5BD,GAD4B,CAE/BC,EAAOC,aAJgB,cAMxBH,EAAYR,sBAAuB,SAACS,EAAOC,GAAR,OAClCD,EAAMG,QAAO,SAACC,GAAD,OAAaA,EAAQC,KAAOJ,EAAOC,cAPzB,IAWrBC,EAASL,YAAc,GAAD,eACzBC,EAAYH,cAAe,SAACI,EAAOC,GAAR,OAAmBA,EAAOC,YAGlDI,EAAUR,aAAc,GAAD,mBAC1BC,EAAYb,mBAAoB,kBAAM,KADZ,cAE1Ba,EAAYX,mBAAoB,kBAAM,KAFZ,cAG1BW,EAAYV,iBAAkB,kBAAM,KAHV,cAI1BU,EAAYT,sBAAuB,kBAAM,KAJf,cAK1BS,EAAYR,sBAAuB,kBAAM,KALf,cAM1BQ,EAAYP,oBAAqB,kBAAM,KANb,IAiCde,cAAgB,CAC7BV,QACAM,SACAG,YChDaE,EALDC,YAAe,CAC3BC,QAAS,CACPC,SAAUC,K,yDCECC,EAPG,WAChB,OACE,oCACE,wBAAIC,UAAU,aAAd,e,iCCyBS,GACbC,WA5BiB,SAACC,EAAMC,GAAP,OAAkB,SAACC,GACpCA,EAASC,EAAgBjC,qBAEzBkC,IACGC,KAAK,iCAAkC,CAAEL,OAAMC,WAC/CK,MAAK,SAACC,GACLC,QAAQC,IAAIF,GACZL,EAASC,EAAgB/B,kBAAkBmC,EAASG,UAErDC,OAAM,SAACC,GAAD,OAAWV,EAASC,EAAgB9B,gBAAgBuC,SAoB7DC,cAjBoB,kBAAM,SAACX,GAC3BA,EAASC,EAAgB1B,wBACzB2B,IACGU,IAAI,kCACJR,MAAK,gBAAGI,EAAH,EAAGA,KAAH,OAAcR,EAASC,EAAgBzB,qBAAqBgC,OACjEC,OAAM,SAACC,GAAD,OAAWV,EAASC,EAAgBxB,mBAAmBiC,SAahEG,cAVoB,SAAC1B,GAAD,OAAQ,SAACa,GAC7BA,EAASC,EAAgB7B,wBACzB8B,IACGY,OADH,yCAC4C3B,IACzCiB,MAAK,kBAAMJ,EAASC,EAAgB5B,qBAAqBc,OACzDsB,OAAM,SAACC,GAAD,OAAWV,EAASC,EAAgB3B,mBAAmBoC,U,OCzB5DK,EAAY,SAACjC,GAAD,OAAWA,EAAMW,SAASR,QACtC+B,EAAc,SAAClC,GAAD,OAAWA,EAAMW,SAASd,OA8B/B,GACbsC,WAjCiB,SAACnC,GAAD,OAAWA,EAAMW,SAASL,SAkC3C2B,YACAC,cACAE,eAhCqBC,YACrB,CAAC,SAACrC,EAAOsC,GAAR,OAAsBA,GAAWJ,IAClC,SAACI,EAAW3B,GACV,OAAOA,EAAS4B,MAAK,SAACnC,GAAD,OAAaA,EAAQC,KAAOiC,QA8BnDE,oBA1B0BH,YAC1B,CAACH,EAAaD,IACd,SAACtB,EAAUR,GACT,OAAOQ,EAASR,QAAO,SAACC,GAAD,OACrBA,EAAQY,KAAKyB,cAAcC,SAASvC,EAAOsC,sBCV3CE,E,4MACJC,iBAAmB,CACjB5B,KAAM,GACNC,OAAQ,I,EAEVjB,M,2BACK,EAAK4C,kB,IACRC,kBAAkB,I,EAEpBC,aAAe,YAAiB,IAAdC,EAAa,EAAbA,OACR/B,EAAgB+B,EAAhB/B,KAAMgC,EAAUD,EAAVC,MACd,EAAKC,SAAL,eAAiBjC,EAAOgC,K,EAG1BE,aAAe,SAACC,GACdA,EAAIC,iBADkB,MAEG,EAAKpD,MAAtBgB,EAFc,EAEdA,KAAMC,EAFQ,EAERA,OAId,GAFqB,EAAKoC,MAAlB1C,SACwB4B,MAAK,SAACnC,GAAD,OAAaA,EAAQY,OAASA,KAIjE,OAFA,EAAKiC,SAAS,CAAEJ,kBAAkB,IAE3B,EAAKI,SAAL,eAAmB,EAAKL,mBAGjC,EAAKS,MAAMC,aAAatC,EAAMC,GAC9B,EAAKgC,SAAS,CAAEjC,KAAM,GAAIC,OAAQ,M,EAEpCsC,YAAc,WACZ,EAAKN,SAAS,CAAEJ,kBAAkB,K,uDAE1B,IAAD,EACoCW,KAAKxD,MAAxCgB,EADD,EACCA,KAAMC,EADP,EACOA,OAAQ4B,EADf,EACeA,iBAEtB,OACE,6BAAS/B,UAAU,WACjB,kBAAC2C,EAAA,EAAD,CACEC,GAAIb,EACJc,QAAS,IACTC,WAAW,YACXC,eAAa,GAEb,4BAAQ/C,UAAU,eAAegD,QAASN,KAAKD,aAC7C,uDAGJ,0BAAMQ,SAAUP,KAAKN,aAAcpC,UAAU,QAC3C,sCAEE,2BACEA,UAAU,QACVkD,KAAK,OACLhD,KAAK,OACLgC,MAAOhC,EACPiD,SAAUT,KAAKV,aACfoB,YAAY,gBAGhB,wCAEE,2BACEpD,UAAU,QACVkD,KAAK,MACLhB,MAAO/B,EACPgD,SAAUT,KAAKV,aACf9B,KAAK,SACLkD,YAAY,kBAGhB,4BAAQF,KAAK,SAASlD,UAAU,qBAAhC,qB,GAtEgBqD,aAmFpBC,EAAoB,CACxBd,aAAce,EAAkBtD,YAEnBuD,eAPS,SAACtE,GAAD,MAAY,CAClCW,SAAU4D,EAAiBrC,YAAYlC,GACvCG,OAAQoE,EAAiBtC,UAAUjC,MAKGoE,EAAzBE,CAA4C3B,GC/D3D,IAWe2B,eAXS,SAACtE,GAAD,MAAY,CAClCgD,MAAOuB,EAAiBtC,UAAUjC,OAOT,SAACkB,GAAD,MAAe,CACxC+C,SAAU,SAACO,GAAD,OAAOtD,EAASuD,EAAe7E,aAAa4E,EAAEzB,OAAOC,YAElDsB,EApCf,YAAgD,IAApBtB,EAAmB,EAAnBA,MAAOiB,EAAY,EAAZA,SACjC,OACE,yBAAKnD,UAAU,qBACb,+BACE,2BACEA,UAAU,QACVkD,KAAK,OACLhB,MAAOA,EACPiB,SAAUA,SC2BLK,eAXS,SAACtE,EAAO0E,GAC9B,IAAMC,EAAOJ,EAAiBnC,eAAepC,EAAO0E,EAASrE,IAC7D,OAAO,eAAKsE,MAMa,SAACzD,EAAUwD,GAAX,MAAyB,CAClDE,cAAe,SAACvE,GAAD,OAAQa,EAASmD,EAAkBtC,cAAc2C,EAASrE,SAE5DiE,EAjCW,SAAC,GAAyC,IAAvCjE,EAAsC,EAAtCA,GAAIW,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,OAAQ2D,EAAoB,EAApBA,cAM7C,OACE,wBAAI9D,UAAU,WACZ,8BAAOE,GACP,8BAAOC,GACP,4BACEH,UAAU,YACVkD,KAAK,SAELF,QAAS,kBAAMc,EAAcvE,KAJ/B,S,QCwCSiE,eAhBS,SAACtE,GACvB,IAAM6E,EAAqBN,EAAiB/B,oBAAoBxC,GAShE,OADAwB,QAAQC,IAAI,QAASoD,GACd,CACLhF,MAAOgF,EACPlE,SAAU4D,EAAiBrC,YAAYlC,MAI5BsE,EAlDM,SAAC,GAIf,IAHLzE,EAGI,EAHJA,MACAc,EAEI,EAFJA,SAKA,OACE,yBAAKmE,MAAO,CAAEC,QAAS,OAAQC,eAAgB,WAC5CrE,EAASsE,OAAS,GAAsB,IAAjBpF,EAAMoF,OAC5B,gDAEA,kBAACC,EAAA,EAAD,CAAiBC,UAAU,KAAKrE,UAAU,iBACvCjB,EAAMuF,KAAI,gBAAG/E,EAAH,EAAGA,GAAH,OACT,kBAACoD,EAAA,EAAD,CACE4B,IAAKhF,EACLuD,WAAW,gBACXD,QAAS,IACTE,eAAa,GAEb,kBAAC,EAAD,CAGExD,GAAIA,aCbdiF,E,4MACJtF,MAAQ,CAQNuF,cAAc,G,kEAGd/B,KAAKH,MAAMmC,oB,yCAEMC,EAAWC,GAC5BlE,QAAQC,IAAI,YAAagE,GACzBjE,QAAQC,IAAI,YAAaiE,K,+BAoDzB,OACE,6BACE,kBAACjC,EAAA,EAAD,CACEC,IAAI,EACJiC,QAAQ,EACR/B,WAAW,oBACXD,QAAS,IACTE,eAAa,GAEb,kBAAC,EAAD,OAGF,kBAAC,EAAD,MAMA,kBAACJ,EAAA,EAAD,CACEC,GACEF,KAAKH,MAAMuC,iBAAiBX,OAAS,GACrCzB,KAAKH,MAAM1C,SAASsE,OAAS,EAE/BtB,QAAS,IACTC,WAAW,cACXC,eAAa,GAGb,kBAAC,EAAD,OAYF,kBAAC,EAAD,MAICL,KAAKH,MAAMwC,mBACV,kBAAC,IAAD,CACEf,MAAO,CAAEC,QAAS,QAASC,eAAgB,UAC3ChB,KAAK,YACL8B,MAAM,UACNC,OAAQ,GACRC,MAAO,U,GAtHD7B,aA8IZ8B,EAAqB,CACzBT,gBAAiBnB,EAAkBxC,eAEtByC,gBAlBS,SAACtE,GACvBwB,QAAQC,IAAI,QAASzB,GADY,MAEPA,EAAMW,SAAxBd,EAFyB,EAEzBA,MAAOM,EAFkB,EAElBA,OAKf,MAAO,CACLyF,iBAJ0B/F,EAAMM,QAAO,SAACC,GAAD,OACvCA,EAAQY,KAAKyB,cAAcC,SAASvC,EAAOsC,kBAI3CoD,kBAAmBtB,EAAiBpC,WAAWnC,GAC/CG,OAAQoE,EAAiBtC,UAAUjC,GACnCW,SAAUX,EAAMW,SAASd,SAOWoG,EAAzB3B,CAA6CgB,GC3J5DY,IAASC,OACP,6BAEE,kBAAC,IAAD,CAAU3F,MAAOA,GACf,kBAAC,GAAD,QAKJ4F,SAASC,eAAe,W","file":"static/js/main.df4b7248.chunk.js","sourcesContent":["//import actionTypes from \"./contact-types\";\n//import { v4 as uuidv4 } from \"uuid\";\nimport { createAction } from \"@reduxjs/toolkit\";\n\nconst addContactRequest = createAction(\"contacts/addRequest\");\nconst addContactSuccess = createAction(\"contacts/addSuccess\");\nconst addContactError = createAction(\"contacts/addError\");\n\nconst removeContactRequest = createAction(\"contacts/removeRequest\");\nconst removeContactSuccess = createAction(\"contacts/removeSuccess\");\nconst removeContactError = createAction(\"contacts/aremoverror\");\n\nconst fetchContactsRequest = createAction(\"contactfetchRequest\");\nconst fetchContactsSuccess = createAction(\"contacts/fetchSuccess\");\nconst fetchContactsError = createAction(\"contacts/fetchError\");\n\n// const addContact = createAction(\"contact/AddContact\", (name, number) => ({\n//   payload: {\n//     contact: {\n//       name: name,\n//       number: number,\n//       id: uuidv4(),\n//     },\n//   },\n// }));\n//const deleteContact = createAction(\"contact/Delete\");\nconst changeFilter = createAction(\"contact/changeFilter\");\n//const saveInStorage = createAction(\"contact/saveInStorage\");\nexport default {\n  removeContactRequest,\n  removeContactSuccess,\n  removeContactError,\n\n  addContactError,\n  addContactSuccess,\n  addContactRequest,\n  //addContact,\n  //deleteContact,\n  changeFilter,\n  //saveInStorage,\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n};\n//=============without toolkit====\n// const addContact = (name, number) => ({\n//   type: actionTypes.ADDCONTACT,\n//   payload: {\n//     contact: {\n//       name: name,\n//       number: number,\n//       id: uuidv4(),\n//     },\n//   },\n// });\n// const deleteContact = (id) => ({\n//   type: actionTypes.DELETE_CONTACT,\n//   payload: {\n//     id,\n//   },\n// });\n\n// const changeFilter = (filter) => ({\n//   type: actionTypes.CHANGE_FILTER,\n//   payload: {\n//     filter,\n//   },\n// });\n","import { combineReducers } from \"redux\";\n//import actionTypes from \"./contact-types\";\nimport actionTypes from \"./contact-actions\";\n//import contactsActions from \"../contactsOperations/contactsOperation\";\nimport { createReducer } from \"@reduxjs/toolkit\";\n//import contactsOperation from \"../../components/contactsOperations/contactsOperation\";\n\nconst items = createReducer([], {\n  [actionTypes.fetchContactsSuccess]: (state, action) => action.payload,\n  [actionTypes.addContactSuccess]: (state, action) => [\n    ...state,\n    action.payload,\n  ],\n  [actionTypes.removeContactSuccess]: (state, action) =>\n    state.filter((contact) => contact.id !== action.payload),\n  //[actionTypes.saveInStorage]: (state, action) => action.payload,\n});\n\nconst filter = createReducer(\"\", {\n  [actionTypes.changeFilter]: (state, action) => action.payload,\n});\n\nconst loading = createReducer(false, {\n  [actionTypes.addContactRequest]: () => true,\n  [actionTypes.addContactSuccess]: () => false,\n  [actionTypes.addContactError]: () => false,\n  [actionTypes.removeContactRequest]: () => true,\n  [actionTypes.removeContactSuccess]: () => false,\n  [actionTypes.removeContactError]: () => false,\n});\n// {\n//   contacts: {\n//     items: [],\n//     filter: ''\n//   }\n// }\n// export const items = (state = [], { type, payload }) => {\n//   switch (type) {\n//     case actionTypes.addContact.type:\n//       return [...state, payload.contact];\n//     case actionTypes.deleteContact.type:\n//       return state.filter((contact) => contact.id !== payload);\n//     default:\n//       return state;\n//   }\n// };\n// export const filter = (state = \"\", { type, payload }) => {\n//   switch (type) {\n//     case actionTypes.changeFilter.type:\n//       return payload;\n//     default:\n//       return state;\n//   }\n// };\n\nexport default combineReducers({\n  items,\n  filter,\n  loading,\n});\n","//import { createStore, combineReducers } from \"redux\";\n//import { itemsReducer, filterReducer } from \"./contact/contact-reducer\";\nimport contactsReducer from \"./contact/contact-reducer\";\nimport { configureStore } from \"@reduxjs/toolkit\";\n\nconst store = configureStore({\n  reducer: {\n    contacts: contactsReducer,\n  },\n});\nexport default store;\n\n//=======old version, without toolkit=====\n// const rootReducer = combineReducers({\n//   contacts: contactsReducer,\n//   //   items: itemsReducer,\n//   //   filter: filterReducer,\n// });\n\n// const store = createStore(\n//   rootReducer,\n//   window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n// );\n//=======old version=====\n","import React from 'react';\n\nconst MainTitle = () => {\n  return (\n    <>\n      <h1 className=\"mainTitle\">Phonebook</h1>\n    </>\n  );\n};\nexport default MainTitle;\n","import contactsActions from \"../contact/contact-actions\";\nimport axios from \"axios\";\n\nconst addContact = (name, number) => (dispatch) => {\n  dispatch(contactsActions.addContactRequest());\n  //fetch(\"http://localhost:2000/contacts\");\n  axios\n    .post(\"http://localhost:2000/contacts\", { name, number })\n    .then((response) => {\n      console.log(response);\n      dispatch(contactsActions.addContactSuccess(response.data));\n    })\n    .catch((error) => dispatch(contactsActions.addContactError(error)));\n};\n\nconst fetchContacts = () => (dispatch) => {\n  dispatch(contactsActions.fetchContactsRequest());\n  axios\n    .get(\"http://localhost:2000/contacts\")\n    .then(({ data }) => dispatch(contactsActions.fetchContactsSuccess(data)))\n    .catch((error) => dispatch(contactsActions.fetchContactsError(error)));\n};\n\nconst removeContact = (id) => (dispatch) => {\n  dispatch(contactsActions.removeContactRequest());\n  axios\n    .delete(`http://localhost:2000/contacts/${id}`)\n    .then(() => dispatch(contactsActions.removeContactSuccess(id)))\n    .catch((error) => dispatch(contactsActions.removeContactError(error)));\n};\nexport default {\n  addContact,\n  fetchContacts,\n  removeContact,\n};\n","import { createSelector } from \"@reduxjs/toolkit\";\n\nconst getLoading = (state) => state.contacts.loading;\nconst getFilter = (state) => state.contacts.filter;\nconst getContacts = (state) => state.contacts.items;\n\nconst getContactById = createSelector(\n  [(state, contactId) => contactId, getContacts],\n  (contactId, contacts) => {\n    return contacts.find((contact) => contact.id === contactId);\n  }\n);\n\nconst getContactsFiltered = createSelector(\n  [getContacts, getFilter],\n  (contacts, filter) => {\n    return contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n//=============without createSelector=============\n// const getContactById = (state, contactId) => {\n//   const contacts = getContacts(state);\n//   return contacts.find((contact) => contact.id === contactId);\n// };\n// const getContactsFiltered = (state) => {\n//   const contacts = getContacts(state);\n//   const normalizedFilter = getFilter(state).toLowerCase();\n//   return contacts.filter((contact) =>\n//     contact.name.toLowerCase().includes(normalizedFilter)\n//   );\n// };\n//=============without createSelector=============\nexport default {\n  getLoading,\n  getFilter,\n  getContacts,\n  getContactById,\n  getContactsFiltered,\n};\n","import React, { Component } from \"react\";\nimport { CSSTransition } from \"react-transition-group\";\nimport { connect } from \"react-redux\";\n//import contactsActions from \"../../redux/contact/contact-actions\";\nimport contactsOperation from \"../../redux/contactsOperations/contactsOperation\";\nimport contactSelectors from \"../../redux/contact/contact-selectors\";\n\nclass ContactForm extends Component {\n  formInitialState = {\n    name: \"\",\n    number: \"\",\n  };\n  state = {\n    ...this.formInitialState,\n    alertMessageShow: false,\n  };\n  handleChange = ({ target }) => {\n    const { name, value } = target;\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = (evt) => {\n    evt.preventDefault();\n    const { name, number } = this.state;\n\n    const { contacts } = this.props;\n    const existedContact = contacts.find((contact) => contact.name === name);\n    if (existedContact) {\n      this.setState({ alertMessageShow: true });\n      // alert(`${name} is already in contacts`);\n      return this.setState({ ...this.formInitialState });\n    }\n\n    this.props.onAddContact(name, number);\n    this.setState({ name: \"\", number: \"\" });\n  };\n  toggleAlert = () => {\n    this.setState({ alertMessageShow: false });\n  };\n  render() {\n    const { name, number, alertMessageShow } = this.state;\n\n    return (\n      <section className=\"wrapper\">\n        <CSSTransition\n          in={alertMessageShow}\n          timeout={250}\n          classNames=\"alertFade\"\n          unmountOnExit\n        >\n          <button className=\"alertMessage\" onClick={this.toggleAlert}>\n            <p>Contact already exists</p>\n          </button>\n        </CSSTransition>\n        <form onSubmit={this.handleSubmit} className=\"form\">\n          <label>\n            Name\n            <input\n              className=\"input\"\n              type=\"text\"\n              name=\"name\"\n              value={name}\n              onChange={this.handleChange}\n              placeholder=\"Enter name\"\n            ></input>\n          </label>\n          <label>\n            Number\n            <input\n              className=\"input\"\n              type=\"tel\"\n              value={number}\n              onChange={this.handleChange}\n              name=\"number\"\n              placeholder=\"Enter number\"\n            ></input>\n          </label>\n          <button type=\"submit\" className=\"addContact-button\">\n            Add contact\n          </button>\n        </form>\n      </section>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  contacts: contactSelectors.getContacts(state),\n  filter: contactSelectors.getFilter(state),\n});\nconst mapDispathToProps = {\n  onAddContact: contactsOperation.addContact,\n};\nexport default connect(mapStateToProps, mapDispathToProps)(ContactForm);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport contactActions from \"../../redux/contact/contact-actions\";\nimport contactSelectors from \"../../redux/contact/contact-selectors\";\n\nfunction FindContactInput({ value, onChange }) {\n  return (\n    <div className=\"find-input_frame \">\n      <label>\n        <input\n          className=\"input\"\n          type=\"text\"\n          value={value}\n          onChange={onChange}\n        ></input>\n      </label>\n    </div>\n  );\n}\n\n// const mapStateToProps = (state) => {\n//   const { items, filter } = state.contacts;\n\n//   const filteredContacts = items.filter((contact) =>\n//     contact.name.toLowerCase().includes(filter.toLowerCase())\n//   );\n//   return {\n//     contacts: filteredContacts,\n//   };\n// };\nconst mapStateToProps = (state) => ({\n  value: contactSelectors.getFilter(state),\n});\n// const mapDispatchToProps = (dispatch = {\n//   onChangeFilter: (e) => dispatch(contactActions.changeFilter(e.target.value)),\n//   // contactActions.changeFilter,\n// });\n\nconst mapDispatchToProps = (dispatch) => ({\n  onChange: (e) => dispatch(contactActions.changeFilter(e.target.value)),\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(FindContactInput);\n","import React from \"react\";\n// import { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport { connect } from \"react-redux\";\nimport contactsOperation from \"../../redux/contactsOperations/contactsOperation\";\nimport contactSelectors from \"../../redux/contact/contact-selectors\";\n//import contactActions from \"../../redux/contact/contact-actions\";\n\nconst ContactsListItems = ({ id, name, number, deleteContact }) => {\n  // render() {\n  //   const {\n  //     contact: { name, id, number },\n  //     deleteContact,\n  //   } = this.props;\n  return (\n    <li className=\"contact\">\n      <span>{name}</span>\n      <span>{number}</span>\n      <button\n        className=\"deleteBtn\"\n        type=\"button\"\n        // id={id}\n        onClick={() => deleteContact(id)}\n      >\n        x\n      </button>\n    </li>\n  );\n};\n// }\nconst mapStateToProps = (state, ownProps) => {\n  const item = contactSelectors.getContactById(state, ownProps.id);\n  return { ...item };\n  // const item = state.contacts.items.find((item) => item.id === ownProps.id);\n  // console.log(\"item\", item);\n  // console.log(\"item\", item);\n  // return { ...item };\n};\nconst mapDispatchToPRops = (dispatch, ownProps) => ({\n  deleteContact: (id) => dispatch(contactsOperation.removeContact(ownProps.id)),\n});\nexport default connect(mapStateToProps, mapDispatchToPRops)(ContactsListItems);\n","import React from \"react\";\nimport ContactsListItems from \"../contactListItems/ContactsListItems\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport { connect } from \"react-redux\";\nimport contactSelectors from \"../../redux/contact/contact-selectors\";\n//import contactActions from \"../../redux/contact/contact-actions\";\n\nconst ContactsList = ({\n  items,\n  contacts,\n  // deleteContact\n}) => {\n  // render() {\n  //   const { contacts, deleteContact } = this.props;\n  return (\n    <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n      {contacts.length > 0 && items.length === 0 ? (\n        <h4>...Nothing Found</h4>\n      ) : (\n        <TransitionGroup component=\"ul\" className=\"contacts-list\">\n          {items.map(({ id }) => (\n            <CSSTransition\n              key={id}\n              classNames=\"taskList-fade\"\n              timeout={250}\n              unmountOnExit\n            >\n              <ContactsListItems\n                // contact={contact}\n                // key={id}\n                id={id}\n                //deleteContact={() => deleteContact(id)}\n              />\n            </CSSTransition>\n          ))}\n        </TransitionGroup>\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  const getFilteredContact = contactSelectors.getContactsFiltered(state);\n  // const { items, filter } = state.contacts;\n  // const normalizedFilter = filter.toLowerCase();\n\n  // const getFilteredContact = items.filter((contact) =>\n  //   contact.name.toLowerCase().includes(normalizedFilter)\n  // );\n  // console.log(\"getFilteredContact\", getFilteredContact);\n  console.log(\"items\", getFilteredContact);\n  return {\n    items: getFilteredContact,\n    contacts: contactSelectors.getContacts(state),\n  };\n};\n\nexport default connect(mapStateToProps)(ContactsList);\n","import React, { Component } from \"react\";\n//import { v4 as uuidv4 } from \"uuid\";\nimport { connect } from \"react-redux\";\nimport Loader from \"react-loader-spinner\";\n//import contactsActions from \"../../redux/contact/contact-actions\";\n\nimport MainTitle from \"../mainTitle/MainTitle\";\nimport ContactForm from \"../contactForm/ContactForm\";\nimport FindContactInput from \"../findContactInput/FindContactInput\";\nimport ContactsList from \"../contactsList/ContactsList\";\nimport { CSSTransition } from \"react-transition-group\";\nimport contactsOperation from \"../../redux/contactsOperations/contactsOperation\";\nimport contactSelectors from \"../../redux/contact/contact-selectors\";\n\n//import contactActions from \"../../redux/contact/contact-actions\";\n//import { items } from \"../../redux/contact/contact-reducer\";\n\nclass App extends Component {\n  state = {\n    // contacts: [\n    //   { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\n    //   { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\n    //   { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\n    //   { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\n    // ],\n    // filter: \"\",\n    showContacts: false,\n  };\n  componentDidMount() {\n    this.props.onFetchContacts();\n  }\n  componentDidUpdate(prevProps, nextProps) {\n    console.log(\"prevProps\", prevProps);\n    console.log(\"nextProps\", nextProps);\n  }\n  // componentDidMount() {\n  //   const persistedContacts = localStorage.getItem(\"contacts\");\n  //   if (persistedContacts) {\n  //     console.log(\"persistedContacts\", persistedContacts);\n  //     this.props.saveInStorage(JSON.parse(persistedContacts));\n  //   }\n  // }\n\n  // componentDidUpdate(prevProps, prevState) {\n  //   if (prevProps.contacts !== this.props.contacts) {\n  //     console.log(\"this.props.contacts\", this.props.contacts);\n  //     localStorage.setItem(\"contacts\", JSON.stringify(this.props.contacts));\n  //   }\n  // }\n  // addContact = (name, number) => {\n  //   const contact = {\n  //     name: name,\n  //     number: number,\n  //     id: uuidv4(),\n  //   };\n\n  //   this.setState((prevState) => {\n  //     return {\n  //       contacts: [...prevState.contacts, contact],\n  //       showContacts: true,\n  //     };\n  //   });\n  // };\n  // changeFilter = (filter) => {\n  //   this.setState({ filter });\n  // };\n\n  // getFilteredContacts = () => {\n  //   const { contacts, filter } = this.state;\n\n  //   return contacts.filter((contact) =>\n  //     contact.name.toLowerCase().includes(filter.toLowerCase())\n  //   );\n  // };\n  // handleDelete = (id) => {\n  //   this.setState((prevState) => ({\n  //     contacts: prevState.contacts.filter((contact) => contact.id !== id),\n  //   }));\n  // };\n\n  render() {\n    //const { filter, contacts } = this.state;\n\n    //const filteredContacts = this.getFilteredContacts();\n    // const { IsLoadingContacts } = this.props;\n    return (\n      <div>\n        <CSSTransition\n          in={true}\n          appear={true}\n          classNames=\"mainTitle-slideIn\"\n          timeout={5000}\n          unmountOnExit\n        >\n          <MainTitle />\n        </CSSTransition>\n\n        <ContactForm\n        // addContact={this.addContact}\n        // contacts={this.state.contacts}\n        />\n\n        {/* {this.props.filteredContacts && ( */}\n        <CSSTransition\n          in={\n            this.props.filteredContacts.length > 1 ||\n            this.props.contacts.length > 1\n          }\n          timeout={250}\n          classNames=\"findContact\"\n          unmountOnExit\n        >\n          {/* {this.props.contacts > 0 && ( */}\n          <FindContactInput\n          // value={this.props.filter}\n          // onChangeFilter={this.changeFilter}\n          />\n          {/* )} */}\n        </CSSTransition>\n        {/* )} */}\n        {/* <CSSTransition in={showContacts} inmountOnExit> */}\n        {/* {this.state.contacts && ( */}\n        {/* {this.props.filteredContacts === [] ? (\n          <h4>...There is no result</h4>\n        ) : ( */}\n        <ContactsList\n        // deleteContact={this.handleDelete} contacts={contacts}\n        />\n        {/* )} */}\n        {this.props.IsLoadingContacts && (\n          <Loader\n            style={{ display: \"flex \", justifyContent: \"center\" }}\n            type=\"ThreeDots\"\n            color=\"#00BFFF\"\n            height={80}\n            width={80}\n          />\n        )}\n        {/* )} */}\n        {/* </CSSTransition> */}\n      </div>\n    );\n  }\n}\nconst mapStateToProps = (state) => {\n  console.log(\"state\", state);\n  const { items, filter } = state.contacts;\n\n  const getfilteredContacts = items.filter((contact) =>\n    contact.name.toLowerCase().includes(filter.toLowerCase())\n  );\n  return {\n    filteredContacts: getfilteredContacts,\n    IsLoadingContacts: contactSelectors.getLoading(state),\n    filter: contactSelectors.getFilter(state),\n    contacts: state.contacts.items,\n  };\n};\n\nconst mapDispatchToProps = {\n  onFetchContacts: contactsOperation.fetchContacts,\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n//export default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\nimport \"./index.css\";\nimport App from \"./components/app/App\";\n\nReactDOM.render(\n  <div>\n    {/* <React.StrictMode> */}\n    <Provider store={store}>\n      <App />\n    </Provider>\n    {/* </React.StrictMode> */}\n  </div>,\n\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}